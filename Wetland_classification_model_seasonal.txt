/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var upland = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.MultiPolygon(
        [[[[-119.54659106258644, 43.580416781434835],
           [-119.54659106258644, 43.5755823725217],
           [-119.53912379268898, 43.5755823725217],
           [-119.53912379268898, 43.580416781434835]]],
         [[[-119.20218799051806, 43.37720791610155],
           [-119.20218799051806, 43.37084422462798],
           [-119.19231746134325, 43.37084422462798],
           [-119.19231746134325, 43.37720791610155]]]], null, false),
    soil = 
    /* color: #ed4d16 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.MultiPolygon(
        [[[[-118.41838096501849, 42.61748154622974],
           [-118.41838096501849, 42.613818042998126],
           [-118.41220115544817, 42.613818042998126],
           [-118.41220115544817, 42.61748154622974]]],
         [[[-119.15527013866908, 43.40931288468322],
           [-119.15527013866908, 43.40878288341236],
           [-119.15436891644008, 43.40878288341236],
           [-119.15436891644008, 43.40931288468322]]]], null, false),
    shrub = 
    /* color: #ffc82d */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      },
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.MultiPolygon(
        [[[[-118.5520307454892, 43.28462584839181],
           [-118.5520307454892, 43.28423924579263],
           [-118.5515801343747, 43.28423924579263],
           [-118.5515801343747, 43.28462584839181]]],
         [[[-119.32632947911306, 43.60429876947967],
           [-119.32632947911306, 43.60404239305398],
           [-119.32602370728536, 43.60404239305398],
           [-119.32602370728536, 43.60429876947967]]]], null, false),
    wet = ee.FeatureCollection("users/4932539/wetHarneyBasin"),
    footprint = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-119.67060150811537, 43.728560858639604],
          [-119.67060150811537, 42.83280003143486],
          [-118.37970795342787, 42.83280003143486],
          [-118.37970795342787, 43.728560858639604]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var wetPoly = ee.Image().paint(wet).add(1);
Map.addLayer(wetPoly, null, 'wetPoly');
//=== helper functions =====================================================

var bandRenamel8 = function(image){
  var rename = image.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7'],
  ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);
  return rename;
};

var cloudMask = function(image){
  var quality =image.select(['pixel_qa']);
  // clear = no clouds, coud shadow, or snow
  var clear = quality.bitwiseAnd(8).eq(0) // cloud shadow
                .and(quality.bitwiseAnd(32).eq(0)) // cloud
                .and(quality.bitwiseAnd(16).eq(0)); // snow
  image = image.mask(clear);
  return image;
};  

var maskCollectionNDVI = function(image){
  var mask = image.select('ndvi');
  return image.select('B1', 'B2', 'B3', 'B4', 'B5', 'B7').mask(mask);
};

var maskCollectionNDWI = function(image){
  var mask = image.select('ndwi');
  return image.select('B1', 'B2', 'B3', 'B4', 'B5', 'B7').mask(mask);
};

var addTime = function(image) {
  return image.addBands(image.metadata('year'));
};

//============================================================================
//    create imageCollection - filter landsat l5, l7, l8, and merge 
//============================================================================
{
var periodl5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
    .filterBounds(wetPoly.geometry()) 
  .filter((ee.Filter.date('1984-01-01', '2011-12-31')))
  .map(cloudMask);
// print(periodl5, 'periodl5');

var periodl7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
    .filterBounds(wetPoly.geometry()) 
  .filter((ee.Filter.date('2012-01-01', '2012-12-31')))
  .map(cloudMask);
// print(periodl7, 'periodl7');

var periodl8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterBounds(wetPoly.geometry()) 
  .filter((ee.Filter.date('2013-01-01', '2019-12-31')))
  .map(cloudMask)
  .map(bandRenamel8);
// print(periodl8, 'periodl8');

var period = ee.ImageCollection(periodl5.merge(periodl8)); 
// print (period.limit(2),'period');

var period = period.filter((ee.Filter.date('1999-01-01', '2003-12-31')));
var year = 2003;
}
//============================================================================
//    filter collection into annual-seasonal means  
//============================================================================
{
var wetMonth =  ee.ImageCollection(ee.List.sequence(2, 11).map(function(month){
  return  ee.ImageCollection(period)
                        .select('B1', 'B2', 'B3', 'B4', 'B5', 'B7') 
                        .filter(ee.Filter.calendarRange(month, month, 'month'))
                        .median()
                        .set({month: month});
}));

print(wetMonth, 'wetMonth');

// var wetImg = (wetMonth.filterMetadata('month','equals',2)).first();

// Map.addLayer (ee.Image(wetImg).clip(footprint), {'min': 335, 'max': 4188, 'bands': ['B4', 'B3', 'B2']}, 'wetImg');
}
//============================================================================
//    generate endmembers 
//============================================================================
{
//=== upland ================================================================
var uplandList = wetMonth.map(function(image) {
  return image.reduceRegions({
    collection: upland,
    reducer: ee.Reducer.mean(),
    scale: 30
  });
});

var uplandList = ee.FeatureCollection(uplandList).flatten()
.map(function (feature) {
    return ee.Feature(null, {dict: feature.toDictionary()});
  }).aggregate_array('dict');
  
var uplandList =  ee.List(ee.List.sequence(0,9).map(function(object){
  var endmemUpland = ee.Dictionary(ee.List(uplandList).get(object)).values();
  return ee.List(endmemUpland);
}));

print(uplandList,'uplandList'); 

//=== shrub ================================================================
var shrubList = wetMonth.map(function(image) {
  return image.reduceRegions({
    collection: shrub,
    reducer: ee.Reducer.mean(),
    scale: 30
  });
});

var shrubList = ee.FeatureCollection(shrubList).flatten()
.map(function (feature) {
    return ee.Feature(null, {dict: feature.toDictionary()});
  }).aggregate_array('dict');
  
var shrubList =  ee.List(ee.List.sequence(0,9).map(function(object){
  var endmemShrub = ee.Dictionary(ee.List(shrubList).get(object)).values();
  return ee.List(endmemShrub);
}));

print(shrubList,'shrubList');

//=== soil =================================================================
var soilList = wetMonth.map(function(image) {
  return image.reduceRegions({
    collection: soil,
    reducer: ee.Reducer.mean(),
    scale: 30
  });
});

var soilList = ee.FeatureCollection(soilList).flatten()
.map(function (feature) {
    return ee.Feature(null, {dict: feature.toDictionary()});
  }).aggregate_array('dict');

var soilList =  ee.List(ee.List.sequence(0,9).map(function(object){
  var endmemSoil = ee.Dictionary(ee.List(soilList).get(object)).values();
  return ee.List(endmemSoil);
}));

print(soilList,'soilList');

//=== ndvi =================================================================
var list1 = [
  ee.List([0.3]),
  ee.List([0.3]),
  ee.List([0.35]),
  ee.List([0.6]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.6]),
  ee.List([0.4])
  ];
var ndviThld = ee.List(list1);

var ndviMask = ee.ImageCollection(ee.List.sequence(0,9).getInfo().map(function(object){
 
  var month = 2 + object;
  var img = ee.Image(wetMonth.filter(ee.Filter.rangeContains('month',month,month+1)).first());
  var ndvi = ee.Image(img.normalizedDifference(['B4', 'B3']));
  ndvi = ndvi.select([0], ['ndvi']).updateMask(wetPoly);
  var ndviGTE = ndviThld.get(object);

  return ee.Image(img).addBands(ndvi).updateMask(ndvi.gte(ee.Number(ndviGTE)));
}));

// Map.addLayer(ndviMask.filterMetadata('month','equals',7).select([6]),{palette: '00FF00'},'NDVI mask');


var ndviMask = ndviMask.map(maskCollectionNDVI);
print(ndviMask,'ndviMask');


var ndviList = ndviMask.map(function(image){
  return image.reduceRegions({
    reducer: ee.Reducer.mean(),
    collection: footprint, //<--- draw geometry covering wetPoly - name footprint
    scale: 30,
    tileScale: 2
  });
});

var ndviList = ee.FeatureCollection(ndviList).flatten()
.map(function (feature) {
    return ee.Feature(null, {dict: feature.toDictionary()});
  }).aggregate_array('dict');

var ndviList = ee.List(ee.List.sequence(0,9).map(function(object){
  var endmemNDVI = ee.Dictionary(ee.List(ndviList).get(object)).values();
  return ee.List(endmemNDVI);
}));

print(ndviList, 'ndviList');

//=== ndwi =================================================================
var list2 = [
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7]),
  ee.List([0.7])
  ];
var ndwiThld = ee.List(list2);

var ndwiMask = ee.ImageCollection(ee.List.sequence(0,9).getInfo().map(function(object){
 
  var month = 2 + object;
  var img = ee.Image(wetMonth.filter(ee.Filter.rangeContains('month',month,month+1)).first());
  var ndwi = ee.Image(img.normalizedDifference(['B3', 'B5']));
  ndwi = ndwi.select([0], ['ndwi']).updateMask(wetPoly);
  var ndwiGTE = ndwiThld.get(object);

  return ee.Image(img).addBands(ndwi).updateMask(ndwi.gte(ee.Number(ndwiGTE)));
}));

// Map.addLayer(ndwiMask.filterMetadata('month','equals',4).select([6]),{palette: '00FF00'},'NDWI mask');


var ndwiMask = ndwiMask.map(maskCollectionNDWI);
print(ndwiMask,'ndwiMask');


var ndwiList = ndwiMask.map(function(image){
  return image.reduceRegions({
    reducer: ee.Reducer.mean(),
    collection: footprint, //<--- draw geometry covering wetPoly - name footprint
    scale: 30,
    tileScale: 2
  });
});

var ndwiList = ee.FeatureCollection(ndwiList).flatten()
.map(function (feature) {
    return ee.Feature(null, {dict: feature.toDictionary()});
  }).aggregate_array('dict');

var ndwiList = ee.List(ee.List.sequence(0,9).map(function(object){
  var endmemNDWI = ee.Dictionary(ee.List(ndwiList).get(object)).values();
  return ee.List(endmemNDWI);
}));

print(ndwiList, 'ndwiList');
}
//============================================================================
//    unmix collection - classify water 
//============================================================================
{
var wetUnmix =  ee.ImageCollection(ee.List.sequence(0,9).getInfo().map(function(object){
  var month = 2 + object;
  var img = ee.Image(wetMonth.filter(ee.Filter.rangeContains('month',month,month+1)).first());

  var endmemUpland = ee.List(uplandList).get(object);
  var endmemNDVI   = ee.List(ndviList).get(object);
  var endmemNDWI   = ee.List(ndwiList).get(object);
  var endmemShrub  = ee.List(shrubList).get(object);
  var endmemSoil   = ee.List(soilList).get(object);
  
  var sma = img.unmix([endmemUpland,endmemNDVI,endmemNDWI,endmemShrub,endmemSoil], true, true)
                          .setMulti(['month',img.get('month')]);
  return ee.Image(sma).updateMask(wetPoly);   
  }));
 
print(wetUnmix,'wetUnmix');
var unmixed = (wetUnmix.filterMetadata('month','equals',6)).first();
print(unmixed, 'unmixed');

}
//============================================================================
//    visualize surface water 
//============================================================================
{
var watVis = {
  min:0.2,
  max:1,
  palette: ['blue', 'blue']
};

var unmixWater = (wetUnmix.filterMetadata('month','equals',5)).select('band_2').mean();
var unmixMask = unmixWater.updateMask(unmixWater).gte(0.20);
var unmixWater = unmixWater.mask(unmixMask);
Map.addLayer({
  eeObject:unmixWater.updateMask(unmixWater.divide(1)),
  name:'wat',
  visParams: watVis
});
}